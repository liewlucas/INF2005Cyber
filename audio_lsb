import wave

def encode(n, payload, terminator):
    print("\nEncoding Starts..")
    audio = wave.open(r"C:\Users\rylft\Downloads\dynasty - miia [edit audio].wav", mode="rb")

    terminator = str(terminator)

    # Convert audio into bytes
    frame_bytes = list(audio.readframes(audio.getnframes()))

    # Initialize an empty string to store the binary representation
    binary_list = []

    # Convert all bytes of audio into binary
    for byte in frame_bytes:
        binary_value = bin(byte)[2:].zfill(8)
        binary_list.append(binary_value)

    payload += terminator

    # Convert payload and delimiter to binary
    binary_payload = ''.join(format(ord(char), '08b') for char in payload)


    # Check if padding is needed
    if len(binary_payload) % n != 0:
        # Calculate the number of padding bits needed
        padding_length = n - (len(binary_payload) % n)
        binary_payload += "0" * padding_length  # Padding with zeros


    # Initialize an empty list to store the binary chunks
    binary_chunks = []

    # Iterate through the binary string in chunks of size 'n' for n LSBs
    for i in range(0, len(binary_payload), n):
        chunk = binary_payload[i:i + n]
        binary_chunks.append(chunk)

    mod_binary_list = []


    # Replace n LSBs of audio bytes with payload bits
    for i, n_bits in enumerate(binary_chunks):
        # Extract the current binary byte from the audio
        audio_byte = binary_list[i]

        # Replace the last n bits of the audio byte with n_bits
        new_audio_byte = audio_byte[:-n] + n_bits

        # Update the binary_list with the modified audio byte
        mod_binary_list.append(new_audio_byte)

    final_binary_list = []

    final_binary_list.extend(mod_binary_list)

    # Add the remaining audio bytes
    final_binary_list.extend(binary_list[len(mod_binary_list):])


    # Initialize an empty bytearray to store the reconstructed frame bytes
    frame_modified = []

    # Iterate through binary strings and convert to bytes
    for binary_string in final_binary_list:
        # Convert the binary string to an integer
        decimal_value = int(binary_string, 2)

        # Append the integer value as a byte to the bytearray
        frame_modified.append(decimal_value)


    frame_mod_bytes = bytes(frame_modified)


    # Write the modified audio to a new file
    with wave.open('sampleStego.wav', 'wb') as new_audio:
        new_audio.setparams(audio.getparams())
        new_audio.writeframes(frame_mod_bytes)

    print("Successfully encoded inside sampleStego.wav")


def decode(n, terminator):
    print("\nDecoding Starts..")
    audio = wave.open('sampleStego.wav', mode='rb')

    terminator = str(terminator)

    binary_terminator = ''.join(format(ord(char), '08b') for char in terminator)


    # Convert audio into bytes
    frame_bytes = list(audio.readframes(audio.getnframes()))


    # Initialize an empty string to store the binary representation
    binary_list = []

    # Convert all bytes of audio into binary
    for byte in frame_bytes:
        binary_value = bin(byte)[2:].zfill(8)
        binary_list.append(binary_value)

    # Initialize an empty string to store the hidden message
    hidden_message = ''
    hidden_bits = ''

    # Iterate through the audio bits to retrieve the message
    for binary_byte in binary_list:
        retrieved_bits = binary_byte[-n:]
        hidden_bits += retrieved_bits

        if binary_terminator in hidden_bits:
            break



    # Iterate through the bit string and group by 8 bits
    for i in range(0, len(hidden_bits), 8):
        chunk = hidden_bits[i:i + 8]
        ascii_character = chr(int(chunk,2))
        hidden_message += ascii_character

        if terminator in hidden_message:
            message = hidden_message.replace("5555", "")
            break

    print("Decoded message: ", message)

    audio.close()


# Call the encode function with the desired LSB count (n)
encode(8, "The spider sings", "5555")

# Call the decode function with the same 'n' value used during encoding
decode(8, 5555)
