import wave

def encode(n):
    print("\nEncoding Starts..")
    audio = wave.open(r"C:\Users\rylft\Downloads\Iniko - Jericho (Acapella).wav", mode="rb")

    # Convert audio into bytes
    frame_bytes = list(audio.readframes(audio.getnframes()))

    # print(frame_bytes)

    # Initialize an empty string to store the binary representation
    binary_list = []

    # Convert all bytes of audio into binary
    for byte in frame_bytes:
        binary_value = bin(byte)[2:].zfill(8)
        binary_list.append(binary_value)


    # print("Bytes in binary: ", binary_list)

    # Define payload and delimiter
    payload = "Spiderman is Peter Parker"
    delimiter = "5555"

    payload += delimiter

    # Convert payload and delimiter to binary
    binary_payload = ''.join(format(ord(char), '08b') for char in payload)


    # print("Payload binary: " ,binary_payload)


    # Check if padding is needed
    if len(binary_payload) % n != 0:
        # Calculate the number of padding bits needed
        padding_length = n - (len(binary_payload) % n)
        binary_payload += "0" * padding_length  # Padding with zeros


    # Initialize an empty list to store the binary chunks
    binary_chunks = []

    # Iterate through the binary string in chunks of size 'n' for n LSBs
    for i in range(0, len(binary_payload), n):
        chunk = binary_payload[i:i + n]
        binary_chunks.append(chunk)

    # print(binary_chunks)

    mod_binary_list = []


    # Replace n LSBs of audio bytes with payload bits
    for i, n_bits in enumerate(binary_chunks):
        # Extract the current binary byte from the audio
        audio_byte = binary_list[i]
        # print("Audio byte: ", audio_byte)

        # Replace the last n bits of the audio byte with n_bits
        new_audio_byte = audio_byte[:-n] + n_bits
        # print("New Audio byte: ", new_audio_byte)

        # Update the binary_list with the modified audio byte
        mod_binary_list.append(new_audio_byte)

    print(mod_binary_list)
    final_binary_list = []

    final_binary_list.extend(mod_binary_list)

    # Add the remaining audio bytes
    final_binary_list.extend(binary_list[len(mod_binary_list):])

    # Initialize an empty bytearray to store the reconstructed frame bytes
    frame_modified = bytearray()

    # Iterate through binary strings and convert to bytes
    for binary_string in final_binary_list:
        # Convert the binary string to an integer
        decimal_value = int(binary_string, 2)

        # Append the integer value as a byte to the bytearray
        frame_modified.append(decimal_value)

    print(frame_modified)

    # Write the modified audio to a new file
    newAudio = wave.open('sampleStego.wav', 'wb')
    newAudio.setparams(audio.getparams())
    newAudio.writeframes(frame_modified)

    newAudio.close()
    audio.close()
    print("Successfully encoded inside sampleStego.wav")


def decode(n):
    print("\nDecoding Starts..")
    audio = wave.open('sampleStego.wav', mode='rb')

    # Convert audio into bytes
    frame_bytes = list(audio.readframes(audio.getnframes()))

    # Initialize an empty string to store the binary representation
    binary_list = []

    # Convert all bytes of audio into binary
    for byte in frame_bytes:
        binary_value = bin(byte)[2:].zfill(8)
        binary_list.append(binary_value)


    # Initialize an empty string to store the binary payload
    binary_payload = ''

    # Define the delimiter in binary
    binary_delimiter = '001101010011010000110101001101010011010000110101001101010011010000110101'

    # Initialize a counter for detecting the delimiter
    delimiter_count = 0

    # Iterate through binary audio bytes to find the delimiter
    for i, audio_byte in enumerate(binary_list):
        binary_payload += audio_byte

        # Check if the delimiter is found
        if audio_byte == binary_delimiter[delimiter_count]:
            delimiter_count += 1
            # If the entire delimiter is found, stop searching
            if delimiter_count == len(binary_delimiter):
                break
        else:
            delimiter_count = 0

    # Extract the payload part of the binary
    binary_payload = binary_payload[:-len(binary_delimiter)]

    # Initialize an empty string to store the hidden message
    hidden_message = ''

    # Iterate through the binary payload in chunks of size 'n'
    for i in range(0, len(binary_payload), n):
        chunk = binary_payload[i:i + n]

        # Convert the binary chunk to an integer
        decimal_value = int(chunk, 2)

        # Convert the integer value to a character and append to the message
        hidden_message += chr(decimal_value)

    print("Decoded message: ", hidden_message)

    audio.close()


# Call the encode function with the desired LSB count (n)
encode(4)

# Call the decode function with the same 'n' value used during encoding
decode(4)
